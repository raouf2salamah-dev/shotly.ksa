// Mocks generated by Mockito 5.4.4 from annotations
// in shotly/test/smart_image_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:shotly/src/utils/lazy_loading_manager.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LazyLoadingManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLazyLoadingManager extends _i1.Mock
    implements _i3.LazyLoadingManager {
  MockLazyLoadingManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set maxConcurrentLoads(int? value) => super.noSuchMethod(
        Invocation.setter(
          #maxConcurrentLoads,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get maxConcurrentLoads => (super.noSuchMethod(
        Invocation.getter(#maxConcurrentLoads),
        returnValue: 0,
      ) as int);

  @override
  bool isLoading(String? resourceId) => (super.noSuchMethod(
        Invocation.method(
          #isLoading,
          [resourceId],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isResourceLoaded(String? resourceId) => (super.noSuchMethod(
        Invocation.method(
          #isResourceLoaded,
          [resourceId],
        ),
        returnValue: false,
      ) as bool);

  @override
  dynamic getCachedResource(String? resourceId) =>
      super.noSuchMethod(Invocation.method(
        #getCachedResource,
        [resourceId],
      ));

  @override
  void clearResourceCache(String? resourceId) => super.noSuchMethod(
        Invocation.method(
          #clearResourceCache,
          [resourceId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearAllCache() => super.noSuchMethod(
        Invocation.method(
          #clearAllCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int getCachedResourcesCount() => (super.noSuchMethod(
        Invocation.method(
          #getCachedResourcesCount,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i2.Future<T> loadResource<T>(
    String? resourceId,
    _i2.Future<T> Function()? loader, {
    int? priority = 0,
    bool? forceReload = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadResource,
          [
            resourceId,
            loader,
          ],
          {
            #priority: priority,
            #forceReload: forceReload,
          },
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #loadResource,
                  [
                    resourceId,
                    loader,
                  ],
                  {
                    #priority: priority,
                    #forceReload: forceReload,
                  },
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #loadResource,
                [
                  resourceId,
                  loader,
                ],
                {
                  #priority: priority,
                  #forceReload: forceReload,
                },
              ),
            ),
      ) as _i2.Future<T>);

  @override
  void prioritizeVisibleResources(
    List<String>? visibleResourceIds, {
    int? priority = 10,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #prioritizeVisibleResources,
          [visibleResourceIds],
          {#priority: priority},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cancelLoading(String? resourceId) => super.noSuchMethod(
        Invocation.method(
          #cancelLoading,
          [resourceId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Future<void> prefetchResources(
    Map<String, _i2.Future<dynamic> Function()>? resources, {
    int? priority = -1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #prefetchResources,
          [resources],
          {#priority: priority},
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  void resetForTesting() => super.noSuchMethod(
        Invocation.method(
          #resetForTesting,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
